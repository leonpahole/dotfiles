// Place your key bindings in this file to override the defaults
[
  // tmux-like navigation
  {
    "key": "{{ .mKey }}+h",
    "command": "workbench.action.navigateLeft",
    "when": "vim.mode === 'Normal' || vim.mode === 'Visual'"
  },
  {
    "key": "{{ .mKey }}+l",
    "command": "workbench.action.navigateRight",
    "when": "vim.mode === 'Normal' || vim.mode === 'Visual'"
  },
  {
    "key": "{{ .mKey }}+l",
    "command": "workbench.action.focusFirstEditorGroup",
    "when": "!editorFocus"
  },
  {
    "key": "{{ .mKey }}+k",
    "command": "workbench.action.navigateUp",
    "when": "vim.mode === 'Normal' || vim.mode === 'Visual'"
  },
  {
    "key": "{{ .mKey }}+j",
    "command": "workbench.action.navigateDown",
    "when": "vim.mode === 'Normal' || vim.mode === 'Visual'"
  },
  // tab to select items in file explorer rather than enter
  {
    "key": "enter",
    "command": "-list.select",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "tab",
    "command": "list.select",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  // use shift + L and shift + H to switch editors
  {
    "key": "shift+l",
    "command": "workbench.action.nextEditor",
    "when": "!inputFocus || (editorFocus && vim.mode === 'Normal')"
  },
  {
    "key": "shift+h",
    "command": "workbench.action.previousEditor",
    "when": "!inputFocus || (editorFocus && vim.mode === 'Normal')"
  },
  // scroll up and down quick results
  {
    "key": "{{ .mKey }}+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "{{ .mKey }}+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  // scroll up and down intellisense with {{ .mKey }} + arrows
  {
    "key": "{{ .mKey }}+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "{{ .mKey }}+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetVisible"
  },
  // resizing main panel
  {
    "key": "{{ .mKey }}+b j",
    "command": "workbench.action.increaseViewHeight"
  },
  {
    "key": "{{ .mKey }}+b k",
    "command": "workbench.action.decreaseViewHeight"
  },
  {
    "key": "{{ .mKey }}+b h",
    "command": "workbench.action.increaseViewWidth"
  },
  {
    "key": "{{ .mKey }}+b l",
    "command": "workbench.action.decreaseViewWidth"
  },
  // open terminal if not already when pressing the down key
  {
    "key": "{{ .mKey }}+j",
    "command": "workbench.action.terminal.focus",
    "when": "editorFocus && view.terminal.visible == false && vim.mode == 'Normal'"
  },
  // maximise terminal
  {
    "key": "{{ .mKey }}+b m",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "terminalFocus"
  },
  // maximise editor
  // if both open
  {
    "key": "{{ .mKey }}+b m",
    "when": "editorFocus && vim.mode == 'Normal' && view.terminal.visible && sideBarVisible",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.togglePanel",
        "workbench.action.closeSidebar",
        "workbench.action.toggleMaximizeEditorGroup"
      ]
    }
  },
  // if terminal open
  {
    "key": "{{ .mKey }}+b m",
    "when": "editorFocus && vim.mode == 'Normal' && view.terminal.visible && !sideBarVisible",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.togglePanel",
        "workbench.action.toggleMaximizeEditorGroup"
      ]
    }
  },
  // if sidebar open
  {
    "key": "{{ .mKey }}+b m",
    "when": "editorFocus && vim.mode == 'Normal' && !view.terminal.visible && sideBarVisible",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.closeSidebar",
        "workbench.action.toggleMaximizeEditorGroup"
      ]
    }
  },
  // if none open
  {
    "key": "{{ .mKey }}+b m",
    "when": "editorFocus && vim.mode == 'Normal' && !view.terminal.visible && !sideBarVisible",
    "command": "workbench.action.toggleMaximizeEditorGroup"
  },
  // open new terminal
  {
    "key": "{{ .mKey }}+b t",
    "when": "terminalFocus",
    "command": "workbench.action.terminal.new"
  },
  // scroll terminals
  {
    "key": "{{ .mKey }}+b j",
    "when": "terminalFocus",
    "command": "workbench.action.terminal.focusNext"
  },
  {
    "key": "{{ .mKey }}+b k",
    "when": "terminalFocus",
    "command": "workbench.action.terminal.focusPrevious"
  },
  // scroll terminal with alt+j and alt+k
  {
    "key": "alt+j",
    "command": "workbench.action.terminal.scrollDown",
    "when": "terminalFocus"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.terminal.scrollUp",
    "when": "terminalFocus"
  },
  // split editor
  {
    "key": "{{ .mKey }}+b i",
    "when": "editorFocus",
    "command": "workbench.action.splitEditorRight"
  },  
  {
    "key": "alt+i",
    "command": "search.action.focusFilesToInclude",
    "when": "inSearchEditor"
  },
  {
    "key": "alt+e",
    "command": "search.action.focusFilesToExclude",
    "when": "inSearchEditor"
  },
  // search - focus results
  {
    "key": "{{ .mKey }}+j",
    "command": "runCommands",
    "args": {
      "commands": [
        "search.action.focusNextSearchResult",
        "extension.vim_escape"
      ]
    },
    "when": "inSearchEditor && inputBoxFocus"
  },
  // search - focus input box
  {
    "key": "{{ .mKey }}+k",
    "command": "search.action.focusQueryEditorWidget",
    "when": "inSearchEditor && !searchInputBoxFocus"
  },
  // search - focus next result after
  {
    "key": "n",
    "command": "runCommands",
    "args": {
      "commands": [
        "search.action.focusNextSearchResult",
        "extension.vim_escape"
      ]
    },
    "when": "inSearchEditor && !inputBoxFocus"
  },
  // search - focus previous result after
  {
    "key": "shift+n",
    "command": "runCommands",
    "args": {
      "commands": [
        "search.action.focusPreviousSearchResult",
        "search.action.focusPreviousSearchResult",
        "extension.vim_escape"
      ]
    },
    "when": "inSearchEditor && !searchInputBoxFocus"
  },
  // search - widen the preview
  {
    "key": "alt+j",
    "command": "decreaseSearchEditorContextLines",
    "when": "inSearchEditor"
  },
  {
    "key": "alt+k",
    "command": "increaseSearchEditorContextLines",
    "when": "inSearchEditor"
  },
  // remap {{ .mKey }} + alt + p
  {
    "key": "shift+alt+p",
    "command": "workbench.action.showCommands"
  },
  // search viewlet
  {
    "key": "{{ .mKey }}+j",
    "command": "search.action.focusNextSearchResult",
    "when": "searchViewletFocus"
  },
  {
    "key": "{{ .mKey }}+f",
    "command": "actions.find",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "{{ .mKey }}+j",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "{{ .mKey }}+k",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "escape",
    "command": "-search.action.cancel",
    "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'"
  },
  {
    "key": "escape",
    "command": "runCommands",
    "args": {
      "commands": ["search.action.cancel", "extension.vim_escape"]
    },
    "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'"
  },
  // file explorer
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "d",
    "when": "filesExplorerFocus && !inputFocus",
    "command": "runCommands",
    "args": {
      "commands": ["deleteFile", "workbench.action.focusFifthEditorGroup"]
    }
  },
  {
    "key": "r",
    "when": "filesExplorerFocus && !inputFocus",
    "command": "renameFile"
  },
  {
    "key": "y",
    "when": "filesExplorerFocus && !inputFocus",
    "command": "filesExplorer.copy"
  },
  {
    "key": "x",
    "when": "filesExplorerFocus && !inputFocus",
    "command": "filesExplorer.cut"
  },
  {
    "key": "p",
    "when": "filesExplorerFocus && !inputFocus",
    "command": "filesExplorer.paste"
  },
  {
    "key": "o",
    "when": "filesExplorerFocus && !inputFocus",
    "command": "revealFileInOS"
  },
  {
    "key": "shift+o",
    "when": "filesExplorerFocus && !inputFocus",
    "command": "explorer.openWith"
  },
  // show error popup
  {
    "key": "shift+k",
    "command": "editor.action.showHover",
    "when": "editorTextFocus && (vim.mode === 'Normal' || vim.mode === 'Visual')"
  },
  // scroll quick fix
  {
    "key": "{{ .mKey }}+k",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "{{ .mKey }}+j",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "{{ .mKey }}+p",
    "command": "-workbench.action.quickOpen"
  },
  {
    "key": "shift+alt+n",
    "command": "workbench.action.newWindow"
  },
  {
    "key": "ctrl+shift+n",
    "command": "-workbench.action.newWindow"
  }
  {{ if eq .os "mac" }}
  // mac cmd+d remap
  {
    "key": "cmd+d",
    "command": "-editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "cmd+d",
    "command": "-notebook.addFindMatchToSelection",
    "when": "config.notebook.multiCursor.enabled && notebookCellEditorFocused && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "cmd+d",
    "command": "-extension.vim_cmd+d",
    "when": "editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl"
  },
  {
    "key": "cmd+d",
    "command": "extension.vim_ctrl+d",
    "when": "editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl"
  },
  {
    "key": "cmd+u",
    "command": "-cursorUndo",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+u",
    "command": "extension.vim_ctrl+u",
    "when": "editorTextFocus && vim.active && vim.use<C-u> && !inDebugRepl"
  },
  // ctrl + space for suggestions
  {
    "key": "cmd+space",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  // code completion on q
  {
    "key": "cmd+p",
    "command": "aws.amazonq.invokeInlineCompletion",
    "when": "aws.codewhisperer.connected && editorTextFocus"
  },
  {
    "key": "alt+c",
    "command": "-aws.amazonq.invokeInlineCompletion",
    "when": "aws.codewhisperer.connected && editorTextFocus"
  },
  {{- end }}
]
